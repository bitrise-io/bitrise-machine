format_version: 1.0.0
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git

app:
  envs:
  - GO15VENDOREXPERIMENT: "1"
  - BITRISE_BIN_NAME: bitrise-machine
  - GITHUB_RELEASES_URL: https://github.com/bitrise-tools/${BITRISE_BIN_NAME}/releases

workflows:

  _install_test_tools:
    steps:
    - script:
        title: "TMP: install Go 1.6.0"
        run_if: .IsCI
        inputs:
        - content: |-
            set -x
            set -e
            wget -q https://storage.googleapis.com/golang/go1.6.linux-amd64.tar.gz -O go-bins.tar.gz
            rm -rf /usr/local/go
            tar -C /usr/local -xvzf go-bins.tar.gz
            rm go-bins.tar.gz
    - script:
        title: Install required testing tools
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            set -x

            # Install dependencies
            go get -u github.com/tools/godep

            # Check for unhandled errors
            go get -u github.com/kisielk/errcheck

            # Go lint
            go get -u github.com/golang/lint/golint

            # Go Vet
            go get -u golang.org/x/tools/cmd/vet

  _test:
    steps:
    - script:
        title: Print infos for the test
        inputs:
        - content: |-
            set -x
            go version
            echo $GO15VENDOREXPERIMENT
    - script:
        title: GOLIST_WITHOUT_VENDOR
        inputs:
        - content: |-
            set -e
            set -x
            no_vendor_paths="$(go list ./... | grep -v vendor)"
            envman add --key GOLIST_WITHOUT_VENDOR --value "$no_vendor_paths"
    - script:
        title: Go Test
        inputs:
        - content: go test ./...
    - script:
        title: Go Vet
        inputs:
        - content: go vet $GOLIST_WITHOUT_VENDOR
    - script:
        title: Err check
        inputs:
        - content: errcheck -asserts=true -blank=true $GOLIST_WITHOUT_VENDOR
    - script:
        title: Go Lint
        inputs:
        - content: |-
            #!/bin/bash
            set -e

            while read -r line; do
              echo "-> Linting: $line"
              golint_out="$(golint $line)"
              if [[ "${golint_out}" != "" ]] ; then
                echo "=> Golint issues found:"
                echo "${golint_out}"
                exit 1
              fi
            done <<< "$GOLIST_WITHOUT_VENDOR"

  install:
    before_run:
    - _test
    steps:
    - script:
        title: Test & install
        inputs:
        - content: |-
            #!/bin/bash
            set -v
            set -e

            go install

  godeps-update:
    steps:
    - script:
        title: Dependency update
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            set -x
            go get -u ./...
            rm -rf ./Godeps
            godep save ./...

  ci:
    before_run:
    - _install_test_tools
    - _test
    steps:
    - slack:
        run_if: .IsCI
        inputs:
        - webhook_url: $INTERNAL_DEV_SLACK_WEBHOOK_URL
        - channel: $INTERNAL_DEV_SLACK_CHANNEL
        - from_username: ${BITRISE_BIN_NAME} - CI - OK
        - from_username_on_error: ${BITRISE_BIN_NAME} - CI - ERROR
        - emoji: ":white_check_mark:"
        - emoji_on_error: ":no_entry_sign:"
        - message: |-
            CI was successful on branch: *${BITRISE_GIT_BRANCH}*

            Build URL: ${BITRISE_BUILD_URL}
        - message_on_error: |-
            CI FAILED on branch: *${BITRISE_GIT_BRANCH}*

            Build URL: ${BITRISE_BUILD_URL}

  create-release:
    before_run:
    - _test
    steps:
    - script:
        title: Creating deploy
        inputs:
        - content: |-
            #!/bin/bash
            set -v
            set -e
            if [ -f _bin/tmpbin ] ; then
              rm _bin/tmpbin
            fi
            go build -o _bin/tmpbin
            binversion="$(_bin/tmpbin -version)"
            echo "binversion: ${binversion}"
            mkdir -p _bin/${binversion}
            finalpth=_bin/${binversion}/${BITRISE_BIN_NAME}-$(uname -s)-$(uname -m)
            echo "finalpth: ${finalpth}"
            mv _bin/tmpbin "${finalpth}"
            # register the version for next steps
            envman add --key RELEASE_VERSION --value "${binversion}"
    - script:
        title: Creating release changelog template
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            set -x
            releaseman --ci create-changelog --version="${RELEASE_VERSION}"

  create-release-with-docker-compose:
    steps:
    - script:
        title: Creating deploy
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            set -v

            docker-compose build --no-cache app
            # docker-compose build app
            docker-compose run --rm app bitrise run create-release

  create-test-binaries:
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            set -x

            export ARCH=x86_64
            export GOARCH=amd64

            export OS=Darwin
            export GOOS=darwin
            deploy_pth="./_bin/test-bins/$BITRISE_BIN_NAME-$OS-$ARCH"
            go build -o "$deploy_pth"

            export OS=Linux
            export GOOS=linux
            deploy_pth="./_bin/test-bins/$BITRISE_BIN_NAME-$OS-$ARCH"
            go build -o "$deploy_pth"
